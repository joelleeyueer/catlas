{"ast":null,"code":"import { FormBuilder, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../cat.service\";\nimport * as i4 from \"@angular/common\";\nfunction CatListComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelement(1, \"img\", 7);\n    i0.ɵɵelementStart(2, \"div\", 8)(3, \"h3\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const cat_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", cat_r1.imageUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(cat_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(cat_r1.latestUpdate);\n  }\n}\nexport class CatListComponent {\n  constructor(fb, router, catService) {\n    this.fb = fb;\n    this.router = router;\n    this.catService = catService;\n    this.cats = [{\n      imageUrl: '/assets/images/nala.jpg',\n      name: 'Cat 1',\n      latestUpdate: 'Fed by @walnads - 6 hours ago'\n    }, {\n      imageUrl: '/assets/images/nala.jpg',\n      name: 'Cat 2',\n      latestUpdate: 'Fed by @illeeterate - 2 hours ago'\n    }, {\n      imageUrl: '/assets/images/nala.jpg',\n      name: 'Cat 3',\n      latestUpdate: 'Fed by @anotheruser - 1 day ago'\n    }, {\n      imageUrl: '/assets/images/nala.jpg',\n      name: 'Cat 4',\n      latestUpdate: 'Fed by @walnads - 6 hours ago'\n    }, {\n      imageUrl: '/assets/images/nala.jpg',\n      name: 'Cat 5',\n      latestUpdate: 'Fed by @username - 2 hours ago'\n    }, {\n      imageUrl: '/assets/images/nala.jpg',\n      name: 'Cat 6',\n      latestUpdate: 'Fed by @anotheruser - 1 day ago'\n    }];\n  }\n  ngOnInit() {\n    this.searchForm = this.createForm();\n  }\n  catSearch() {\n    const address = this.searchForm.get('addressSearch')?.value;\n    const [lat, lng] = address.split(',').map(coord => parseFloat(coord.trim()));\n    console.if(!isNaN(lat) && !isNaN(lng));\n    {\n      this.catService.sendCoordinates(lat, lng).subscribe(response => {\n        // Handle the response, e.g., update the cats array with the received data\n        this.cats = response;\n      }, error => {\n        // Handle the error, e.g., display an error message\n        console.error('Error occurred while searching for cats:', error);\n      });\n    }\n    {\n      console.error('Invalid latitude or longitude values');\n    }\n  }\n  createForm() {\n    return new FormBuilder().group({\n      addressSearch: ['', Validators.required]\n    });\n  }\n}\nCatListComponent.ɵfac = function CatListComponent_Factory(t) {\n  return new (t || CatListComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.CatService));\n};\nCatListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CatListComponent,\n  selectors: [[\"app-cat-list\"]],\n  decls: 9,\n  vars: 2,\n  consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"placeholder\", \"Blk 555 Jurong West St 64, or 640555, or Sheng Shiong Jurong West\", \"formControlName\", \"addressSearch\"], [\"type\", \"submit\"], [1, \"cat-list\"], [\"class\", \"cat-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"cat-item\"], [\"alt\", \"cat image\", 3, \"src\"], [1, \"cat-info\"]],\n  template: function CatListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Viewing community cats in:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function CatListComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.catSearch();\n      });\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementStart(5, \"button\", 3);\n      i0.ɵɵtext(6, \"Search\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 4);\n      i0.ɵɵtemplate(8, CatListComponent_div_8_Template, 7, 3, \"div\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.searchForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cats);\n    }\n  },\n  dependencies: [i4.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\".container[_ngcontent-%COMP%] {\\n    width: 50%;\\n  }\\n  \\n  input[_ngcontent-%COMP%] {\\n    width: 100%;\\n    margin-bottom: 20px;\\n  }\\n  \\n  .cat-list[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-wrap: wrap;\\n    justify-content: space-between;\\n    overflow-y: auto;\\n    max-height: 70vh;\\n  }\\n  \\n  .cat-item[_ngcontent-%COMP%] {\\n    flex-basis: 45%;\\n    border: 1px solid #ddd;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n    display: flex;\\n  }\\n  \\n  .cat-item[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n    width: 50px;\\n    height: 50px;\\n    margin-right: 10px;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2F0LWxpc3QvY2F0LWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFVBQVU7RUFDWjs7RUFFQTtJQUNFLFdBQVc7SUFDWCxtQkFBbUI7RUFDckI7O0VBRUE7SUFDRSxhQUFhO0lBQ2IsZUFBZTtJQUNmLDhCQUE4QjtJQUM5QixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0VBQ2xCOztFQUVBO0lBQ0UsZUFBZTtJQUNmLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLGFBQWE7RUFDZjs7RUFFQTtJQUNFLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0VBQ3BCIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XG4gICAgd2lkdGg6IDUwJTtcbiAgfVxuICBcbiAgaW5wdXQge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbiAgXG4gIC5jYXQtbGlzdCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgbWF4LWhlaWdodDogNzB2aDtcbiAgfVxuICBcbiAgLmNhdC1pdGVtIHtcbiAgICBmbGV4LWJhc2lzOiA0NSU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgfVxuICBcbiAgLmNhdC1pdGVtIGltZyB7XG4gICAgd2lkdGg6IDUwcHg7XG4gICAgaGVpZ2h0OiA1MHB4O1xuICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgfVxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;;;;;;;;ICO/DC,8BAA+C;IAC7CA,yBAA0C;IAC1CA,8BAAsB;IAChBA,YAAY;IAAAA,iBAAK;IACrBA,yBAAG;IAAAA,YAAoB;IAAAA,iBAAI;;;;IAHxBA,eAAoB;IAApBA,uDAAoB;IAEnBA,eAAY;IAAZA,iCAAY;IACbA,eAAoB;IAApBA,yCAAoB;;;ADF/B,OAAM,MAAOC,gBAAgB;EAa3BC,YAAoBC,EAAe,EAAUC,MAAc,EAAUC,UAAsB;IAAvE,OAAE,GAAFF,EAAE;IAAuB,WAAM,GAANC,MAAM;IAAkB,eAAU,GAAVC,UAAU;IAT/E,SAAI,GAAG,CACL;MAACC,QAAQ,EAAE,yBAAyB;MAAEC,IAAI,EAAE,OAAO;MAAEC,YAAY,EAAE;IAA+B,CAAC,EACnG;MAACF,QAAQ,EAAE,yBAAyB;MAAEC,IAAI,EAAE,OAAO;MAAEC,YAAY,EAAE;IAAmC,CAAC,EACvG;MAACF,QAAQ,EAAE,yBAAyB;MAAEC,IAAI,EAAE,OAAO;MAAEC,YAAY,EAAE;IAAiC,CAAC,EACrG;MAACF,QAAQ,EAAE,yBAAyB;MAAEC,IAAI,EAAE,OAAO;MAAEC,YAAY,EAAE;IAA+B,CAAC,EACnG;MAACF,QAAQ,EAAE,yBAAyB;MAAEC,IAAI,EAAE,OAAO;MAAEC,YAAY,EAAE;IAAgC,CAAC,EACpG;MAACF,QAAQ,EAAE,yBAAyB;MAAEC,IAAI,EAAE,OAAO;MAAEC,YAAY,EAAE;IAAiC,CAAC,CACtG;EAE8F;EAE/FC,QAAQ;IACN,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,UAAU,EAAE;EACrC;EAEAC,SAAS;IACP,MAAMC,OAAO,GAAG,IAAI,CAACH,UAAU,CAACI,GAAG,CAAC,eAAe,CAAC,EAAEC,KAAK;IAC3D,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGJ,OAAO,CAACK,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAa,IAAKC,UAAU,CAACD,KAAK,CAACE,IAAI,EAAE,CAAC,CAAC;IACtFC,OAAO,CAEPC,EAAE,CAAE,CAACC,KAAK,CAACT,GAAG,CAAC,IAAI,CAACS,KAAK,CAACR,GAAG,CAAC,CAAC;IAAC;MAC9B,IAAI,CAACZ,UAAU,CAACqB,eAAe,CAACV,GAAG,EAAEC,GAAG,CAAC,CAACU,SAAS,CACjDC,QAAQ,IAAG;QACT;QACA,IAAI,CAACC,IAAI,GAAGD,QAAQ;MACtB,CAAC,EACDE,KAAK,IAAG;QACN;QACAP,OAAO,CAACO,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAClE,CAAC,CACF;;IACI;MACLP,OAAO,CAACO,KAAK,CAAC,sCAAsC,CAAC;;EAEzD;EAEQnB,UAAU;IAChB,OAAO,IAAIb,WAAW,EAAE,CAACiC,KAAK,CAAC;MAC7BC,aAAa,EAAE,CAAC,EAAE,EAAEjC,UAAU,CAACkC,QAAQ;KACxC,CAAC;EACJ;;AA5CWhC,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;QAAhBA,gBAAgB;EAAAiC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV7BtC,8BAAuB;MACjBA,0CAA0B;MAAAA,iBAAK;MACnCA,+BAAwD;MAAzBA;QAAA,OAAYuC,eAAW;MAAA,EAAC;MACrDvC,2BAAmI;MACnIA,iCAAsB;MAAAA,sBAAM;MAAAA,iBAAS;MAGvCA,8BAAsB;MACpBA,iEAMM;MACRA,iBAAM;;;MAbAA,eAAwB;MAAxBA,0CAAwB;MAMUA,eAAO;MAAPA,kCAAO","names":["FormBuilder","Validators","i0","CatListComponent","constructor","fb","router","catService","imageUrl","name","latestUpdate","ngOnInit","searchForm","createForm","catSearch","address","get","value","lat","lng","split","map","coord","parseFloat","trim","console","if","isNaN","sendCoordinates","subscribe","response","cats","error","group","addressSearch","required","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/joellee/Desktop/catlas/client/src/app/cat-list/cat-list.component.ts","/Users/joellee/Desktop/catlas/client/src/app/cat-list/cat-list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { CatService } from '../cat.service';\n\n@Component({\n  selector: 'app-cat-list',\n  templateUrl: './cat-list.component.html',\n  styleUrls: ['./cat-list.component.css']\n})\nexport class CatListComponent {\n\n  searchForm!: FormGroup;\n\n  cats = [\n    {imageUrl: '/assets/images/nala.jpg', name: 'Cat 1', latestUpdate: 'Fed by @walnads - 6 hours ago'},\n    {imageUrl: '/assets/images/nala.jpg', name: 'Cat 2', latestUpdate: 'Fed by @illeeterate - 2 hours ago'},\n    {imageUrl: '/assets/images/nala.jpg', name: 'Cat 3', latestUpdate: 'Fed by @anotheruser - 1 day ago'},\n    {imageUrl: '/assets/images/nala.jpg', name: 'Cat 4', latestUpdate: 'Fed by @walnads - 6 hours ago'},\n    {imageUrl: '/assets/images/nala.jpg', name: 'Cat 5', latestUpdate: 'Fed by @username - 2 hours ago'},\n    {imageUrl: '/assets/images/nala.jpg', name: 'Cat 6', latestUpdate: 'Fed by @anotheruser - 1 day ago'},\n  ];\n\n  constructor(private fb: FormBuilder, private router: Router, private catService: CatService) { }\n\n  ngOnInit(): void {\n    this.searchForm = this.createForm();\n  }\n\n  catSearch() {\n    const address = this.searchForm.get('addressSearch')?.value;\n    const [lat, lng] = address.split(',').map((coord: string) => parseFloat(coord.trim()));\n    console.\n\n    if (!isNaN(lat) && !isNaN(lng)) {\n      this.catService.sendCoordinates(lat, lng).subscribe(\n        response => {\n          // Handle the response, e.g., update the cats array with the received data\n          this.cats = response;\n        },\n        error => {\n          // Handle the error, e.g., display an error message\n          console.error('Error occurred while searching for cats:', error);\n        }\n      );\n    } else {\n      console.error('Invalid latitude or longitude values');\n    }\n  }\n\n  private createForm() {\n    return new FormBuilder().group({\n      addressSearch: ['', Validators.required]\n    });\n  }\n}\n","<div class=\"container\">\n  <h2>Viewing community cats in:</h2>\n  <form [formGroup]=\"searchForm\" (ngSubmit)=\"catSearch()\">\n    <input type=\"text\" placeholder=\"Blk 555 Jurong West St 64, or 640555, or Sheng Shiong Jurong West\" formControlName=\"addressSearch\">\n    <button type=\"submit\">Search</button>\n  </form>\n\n  <div class=\"cat-list\">\n    <div class=\"cat-item\" *ngFor=\"let cat of cats\">\n      <img [src]=\"cat.imageUrl\" alt=\"cat image\">\n      <div class=\"cat-info\">\n        <h3>{{cat.name}}</h3>\n        <p>{{cat.latestUpdate}}</p>\n      </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}